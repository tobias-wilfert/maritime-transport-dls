/// Take the watercraft if possible, if not possible return false
operation Source move_watercraft_to(node): Boolean {
    if(self.cooldown == 1){
        self.counter = self.counter + 1; // New boat has been spawend
        self.cooldown = self.rate; // Reset cooldown
        return true;
    }else{
        self.cooldown = self.cooldown - 1; // Decrease cooldown 
        ('Decreased cooldowm from ' + self + ' to: ' + self.cooldown).println('| ');
        return false;
    }
}

operation Segment move_watercraft_to(node): Boolean {
    if(self.has_watercraft){
        self.has_watercraft = false;
        return true;
    }else{
        return false;
    }
}

operation Confluence move_watercraft_to(node): Boolean {
    var direction = self.out1 == node; // Direction this function was called from
    
    // If there is a watercraft and it points int he right direction
    if(self.has_watercraft and (self.last_direction == direction)){
        self.has_watercraft = false;
        return true;
    }else{
        return false;
    }
}

/// Simulate a microstep on the node
operation Source micro_step() {
    // Do nothing in a source
}

operation Segment micro_step() {
    // If there is no space no need to micro step
    if(self.has_watercraft){ return; }

    var predecessor = self.in0;
    if(predecessor.move_watercraft_to(self)){
        self.has_watercraft = true;
        ('Moved from ' + predecessor + ' to ' + self).println('| ');
    }
}

operation Confluence micro_step() {
    // If there is no space no need to micro step
    if(self.has_watercraft){ return; }

    var predecessor0 = self.in0;
    var predecessor1 = self.in1;
    var mode = self.last_direction; // boolean to mark last direction (or current direction)
    // mode = false means last direction was 0 â†’ look in direction 1 first
    // change where to look first depending on Mode
    
    if(not mode){
        var temp = predecessor0;
        predecessor0 = predecessor1;
        predecessor1 = temp;
    }

    if(predecessor0.move_watercraft_to(self)){
        self.has_watercraft = true;
        self.last_direction = not self.last_direction; // Flip the direction
        ('Moved from ' + predecessor0 + ' to ' + self).println('| ');
        return;
    }
    if(predecessor1.move_watercraft_to(self)){
        self.has_watercraft = true;
        ('Moved from ' + predecessor1 + ' to ' + self).println('| ');
        return;
    }
}

operation Sink micro_step() {
    var predecessor = self.in0;

    if(predecessor.move_watercraft_to(self)){
        self.counter = self.counter + 1; // Consumed a Boat
        ('Moved from ' + predecessor + ' to ' + self + ' (destroyed)').println('| ');
    }
}

/// Grab the order from the Schedule and micro step all nodes in that order
operation simulate(){
    var schedule = Schedule.all()[0].list;
    for(node in schedule){
        node.micro_step();
    }
}

operation main(){
    ('-----Step------').println('*');

    // Just to see if the Model gets laoded correctly
    var sinks =  Sink.all();
    var sources =  Source.all();
    var segments =  Segment.all();
    var confluences =  Confluence.all();

    ('The state of the model:').println('| ');
    ('There are ' + sinks.size() + ' sink(s)').println('| ');
    ('There are ' + sources.size() + ' source(s)').println('| ');
    ('There are ' + segments.size() + ' segment(s)').println('| ');
    ('There are ' + confluences.size() + ' confluence(s)').println('| ');

    ('---Simulation--').println('*');
    simulate();
    
    ('----Summary----').println('*');
    // Find the amout of ships that have been spwaned and consuemd
    var ships_spawned = sources.collect(s | s.counter).sum().floor();
    (ships_spawned + ' ship(s) have been spawned').println('| ');

    var ships_in_transit = Shippable.all().select(s | s.has_watercraft).size();
    (ships_in_transit + ' ship(s) are in transit').println('| ');

    var ships_consumed = sinks.collect(s | s.counter).sum().floor();
    (ships_consumed + ' ship(s) have been consumed').println('| ');
     ('---------------').println('*');
}