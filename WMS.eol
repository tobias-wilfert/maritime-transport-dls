// TODO: Add prints so that we see what is happening
operation simulate_from(cur, seen_confluences){
    while(not cur.isTypeOf(Source)){
        var prev = cur.in0;

        if(cur.isTypeOf(Sink)){
            // Try to pull onto us
            if(prev.isTypeOf(Source)){
                // Check if we can spawn
                if(prev.cooldown == 1){
                    prev.counter = prev.counter + 1; // Boat was spawned
                    cur.counter = cur.counter + 1; // Boat is consumed
                    prev.cooldown = prev.rate; // Reset cooldown
                    ('Moved from ' + prev + ' to ' + cur + ' (destroyed)').println('| ');
                }else{
                    prev.cooldown = prev.cooldown - 1; // Decrease cooldown 
                    ('Decreased cooldowm from ' + prev + ' to: ' + prev.cooldown).println('| ');
                }
            }
            if(prev.isTypeOf(Segment) and prev.has_watercraft){
                prev.has_watercraft = false;
                cur.counter = cur.counter + 1; // Boat is consumed
                ('Moved from ' + prev + ' to ' + cur + ' (destroyed)').println('| ');
            }
            if(prev.isTypeOf(Confluence)){
                var our_direction = prev.out1 == cur; // The direction we come from
                // If there is a watercraft and it points our direction pull it
                if(prev.has_watercraft and (prev.last_direction == our_direction)){
                    prev.has_watercraft = false;
                    cur.counter = cur.counter + 1; // Boat is consumed
                }
                // If double marked do both simulations further
                // TODO: Do logic here
                if(seen_confluences.count(prev) == 1){
                    (':)').println('[prefix: String]');
                }else{
                    seen_confluences.add(prev);
                    (':|').println('[prefix: String]');
                }

                // TODO: logic Stop else and mark them
            }
        }
        if(cur.isTypeOf(Segment) and not cur.has_watercraft){
            // Try to pull onto us
            if(prev.isTypeOf(Source)){
                // Check if we can spawn
                if(prev.cooldown == 1){
                    prev.counter = prev.counter + 1; // Boat was spawned
                    cur.has_watercraft = true;
                    prev.cooldown = prev.rate; // Reset cooldown
                    ('Moved from ' + prev + ' to ' + cur).println('| ');
                }else{
                    prev.cooldown = prev.cooldown - 1; // Decrease cooldown 
                    ('Decreased cooldowm from ' + prev + ' to: ' + prev.cooldown).println('| ');
                }
            }
            if(prev.isTypeOf(Segment) and prev.has_watercraft){
                prev.has_watercraft = false;
                cur.has_watercraft = true;
                ('Moved from ' + prev + ' to ' + cur).println('| ');
            }
            if(prev.isTypeOf(Confluence)){
                // TODO:

                // This is just to see something
                if(seen_confluences.count(prev) == 1){
                    (':)').println('[prefix: String]');
                }else{
                    seen_confluences.add(prev);
                    (':|').println('[prefix: String]');
                }

            }
        }
        if(cur.isTypeOf(Confluence)){
            // TODO:
        }

        cur = prev;
    }
}

operation main(){
    ('-----Step------').println('*');

    // Just to see if the Model gets laoded correctly
    var sinks =  Sink.all();
    var sources =  Source.all();
    var segments =  Segment.all();
    var confluences =  Confluence.all();

    ('The state of the model:').println('| ');
    ('There are ' + sinks.size() + ' sink(s)').println('| ');
    ('There are ' + sources.size() + ' source(s)').println('| ');
    ('There are ' + segments.size() + ' segment(s)').println('| ');
    ('There are ' + confluences.size() + ' confluence(s)').println('| ');

    var seen_confluences: Set(Confluence);
    ('---Simulation--').println('*');
    for(sink: Sink in sinks){
        simulate_from(sink, seen_confluences);
    }
    
    ('----Summary----').println('*');
    // Find the amout of ships that have been spwaned and consuemd
    var ships_spawned = sources.collect(s | s.counter).sum().floor();
    (ships_spawned + ' ship(s) have been spawned').println('| ');

    var ships_in_transit = Shippable.all().select(s | s.has_watercraft).size();
    (ships_in_transit + ' ship(s) are in transit').println('| ');

    var ships_consumed = sinks.collect(s | s.counter).sum().floor();
    (ships_consumed + ' ship(s) have been consumed').println('| ');
     ('---------------').println('*');
}